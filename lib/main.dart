import 'package:path/path.dart';
import 'package:path/path.dart;
import 'package:sqflite/sqflite.dart';
import 'package:sqflite_db_connection/model/note.dart';


class DataBase{
  static final DataBase instance=DataBase._init(); /// Global field instance to call constructor 

  static Database _db; // abstract class from sqflite

  DataBase._init(); /// Constructor of the class

  ///open database
  Future<Database> get database async{
    if(_db!=null) return _db;

    _db=await _initDB('Notes.db');
    return _db;
  }

  
  /// By default,data storage location are specified for Android and iOS. 
  /// If you want change use Path provider package
  /// Use path provider to change the data store in iOS and Android.

  /// Initialise the DB
  Future <Database> _initDB( String filePath) async{
    // Get DB location 
    final dbPath=await getDatabasesPath(); 
    final path=join(dbPath,filePath);
    
    ///When there is update in the structure use onUpgrade: 
    ///And change verison:2 count.
    return await openDatabase(path,version:1,onCreate:_createDB); // onCreate:- Provide data schema
  }

  /// Create database schema
  Future _createDB(Database db,int version) async{
  //Data type of Table attributes
  final idType='INTEGER PRIMARY KEY AUTOINCREMENT';

  /// Executed only if not 'notes.db' was not created.
  /// If already existing this db.execute statement won't be executed again.
  await db.execute('''
  CREATE TABLE $tableNotes(
    ${ NoteFields.id} $idType,

  )
  ''');

  /// <--- Here you can you create multiple datatable --->
  }

  Future <Note> create(Note note)async{

    final db=await instance.database;
    
    //final json=note.toJson();
    //final columns='${NoteFields.title},${NoteFields.description}';
    //final values='{json[NoteFields.title]},${json[NoteFields.description]}';
    //final id=await db.rawInsert('INSERT INTO table_name($columns) VALUES($values)');



    // Data inserted here and will get an unique id generated by DB
    // or we can provide unique "id".
    // The above raw insert code is simply done with the below statement.
    //Either way is possible.
    final id= await db.insert(tableNotes, note.toJson());

    // Modifying only the id, which is returned when insertion is done.
    return note.copy(id:id);
  }

  // Creating a note we also want to read a note and this is always 
  // what you need to do with this id(@:70)
  Future<Note> readNote(int id)async{
    //Database node object again
    final db=await instance.database;

    // From which table we want to query so-> tableNotes(table name)
    // Define the columns to retrieve values from our table
    final maps=await db.query(tableNotes,columns: NoteFields.values,where: '${NoteFields}=?',whereArgs: [id],);// This ? mark prevents SQL injection attacks



  }

  /// Close Database after performing all the operation.
  Future close()async{
  
  
  final db=await instance.database;

  db.close();
  }
  
  }